{"version":3,"file":"static/js/679.85d80d9b.chunk.js","mappings":"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","sources":["utils/validators/validators.js","components/pages/login/login_form/styles.js","components/pages/login/login_form/LoginForm.jsx","components/pages/login/styles.js","components/pages/login/Login.jsx","components/ui/form/styles.js","components/ui/form/FormControls.jsx"],"sourcesContent":["export const required = (value) => {\r\n  if (value) return undefined;\r\n\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLength = (maxLength) => (value) => {\r\n  if (value?.length > maxLength)\r\n    return `Max length is ${maxLength} symbols`;\r\n\r\n  return undefined;\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  & label {\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 15px;\r\n  }\r\n\r\n  & input {\r\n    padding: 5px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    outline: none;\r\n  }\r\n\r\n  & small {\r\n    display: inline-block;\r\n  }\r\n\r\n  & button {\r\n    font-family: 'Lato', 'Tahoma', sans-serif;\r\n    font-weight: 400;\r\n    font-size: 20px;\r\n    line-height: 24px;\r\n    color: #ffffff;\r\n    text-decoration: none;\r\n    background-color: #3577ef;\r\n    width: 100%;\r\n    padding: 5px 10px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    width: 100px;\r\n\r\n    &:hover {\r\n      border-radius: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const StyledError = styled.span`\r\n  display: flex;\r\n  align-items: center;\r\n  color: #ff0000;\r\n  text-transform: uppercase;\r\n  margin-bottom: 10px;\r\n\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nexport const StyledCaptcha = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n\r\n  & > img {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n","import { reduxForm, Field } from 'redux-form';\r\nimport { required } from '../../../../utils/validators/validators';\r\nimport { Element } from '../../../ui/form/FormControls';\r\nimport {\r\n  StyledForm,\r\n  StyledError,\r\n  StyledCaptcha,\r\n} from './styles';\r\nimport error from '../../../../img/error.png';\r\n\r\nconst Input = Element('input');\r\n\r\nconst LoginForm = (props) => {\r\n  return (\r\n    <StyledForm onSubmit={props.handleSubmit}>\r\n      <label>\r\n        <Field\r\n          component={Element('input')}\r\n          validate={[required]}\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          type=\"text\"\r\n          right=\"-255\"\r\n          top=\"-2\"\r\n        />\r\n      </label>\r\n      <label>\r\n        <Field\r\n          component={Input}\r\n          validate={[required]}\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          type=\"password\"\r\n          right=\"-255\"\r\n          top=\"-2\"\r\n        />\r\n      </label>\r\n      <label>\r\n        <Field\r\n          component=\"input\"\r\n          name=\"rememberMe\"\r\n          type=\"checkbox\"\r\n        />\r\n        <small>remember me</small>\r\n      </label>\r\n      {props.captchaUrl && (\r\n        <StyledCaptcha>\r\n          <img src={props.captchaUrl} alt=\"Captcha.\" />\r\n          <Field\r\n            component={Element('input')}\r\n            validate={[required]}\r\n            name=\"captcha\"\r\n            placeholder=\"Symbols for image\"\r\n            type=\"text\"\r\n            right=\"-255\"\r\n            top=\"-2\"\r\n          />\r\n        </StyledCaptcha>\r\n      )}\r\n      {props.error && (\r\n        <StyledError>\r\n          <img\r\n            src={error}\r\n            width=\"20\"\r\n            height=\"20\"\r\n            alt=\"Error.\"\r\n          />\r\n          {props.error}\r\n        </StyledError>\r\n      )}\r\n      <button type=\"submit\">Login</button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport const LoginReduxForm = reduxForm({ form: 'login' })(\r\n  LoginForm\r\n);\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledLogin = styled.section`\r\n  background-color: rgba(0, 0, 0, 0.24);\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 50px;\r\n\r\n  & h2 {\r\n    margin-top: 10px;\r\n    margin-bottom: 20px;\r\n    text-transform: uppercase;\r\n  }\r\n\r\n`;\r\n","import { LoginReduxForm } from './login_form/LoginForm';\r\nimport { StyledLogin } from './styles';\r\nimport { Logo } from '../../ui/logo/Logo';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../../redux/auth-reducer';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nconst Login = (props) => {\r\n  const onSubmit = (formData) => {\r\n    props.login(\r\n      formData.email,\r\n      formData.password,\r\n      formData.rememberMe,\r\n      formData.captcha\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {props.isAuth ? (\r\n        <Navigate to=\"/profile\" />\r\n      ) : (\r\n        <StyledLogin>\r\n          <Logo />\r\n          <h2>Login</h2>\r\n          <LoginReduxForm\r\n            onSubmit={onSubmit}\r\n            captchaUrl={props.captchaUrl}\r\n          />\r\n        </StyledLogin>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledContainer = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport const StyledWarning = styled.span`\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  text-transform: uppercase;\r\n  color: rgba(53, 119, 239, 1);\r\n  width: 250px;\r\n  bottom: 0;\r\n  right: ${(props) => {\r\n    let right = `${props.$right}px`;\r\n    if (props.$right === undefined) {\r\n      right = 'none';\r\n    }\r\n    return right;\r\n  }};\r\n  top: ${(props) => {\r\n    let top = `${props.$top}px`;\r\n    if (props.$top === undefined) {\r\n      top = 'none';\r\n    }\r\n    return top;\r\n  }};\r\n\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import { StyledWarning, StyledContainer } from './styles';\r\nimport warning from '../../../img/warning.png';\r\n\r\nexport const Element =\r\n  (Element) =>\r\n  ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n      <StyledContainer>\r\n        <Element {...input} {...props} />\r\n        {hasError && (\r\n          <StyledWarning\r\n            $right={props.right}\r\n            $top={props.top}\r\n          >\r\n            <img\r\n              src={warning}\r\n              alt=\"Warning.\"\r\n              width=\"20\"\r\n              height=\"20\"\r\n            />\r\n            {meta.error}\r\n          </StyledWarning>\r\n        )}\r\n      </StyledContainer>\r\n    );\r\n  };\r\n"],"names":["required","value","StyledForm","styled","_templateObject","_taggedTemplateLiteral","StyledError","_templateObject2","StyledCaptcha","_templateObject3","Input","Element","LoginReduxForm","reduxForm","form","props","_jsxs","onSubmit","handleSubmit","children","_jsx","Field","component","validate","name","placeholder","type","right","top","captchaUrl","src","alt","error","width","height","StyledLogin","connect","state","auth","isAuth","login","_Fragment","Navigate","to","Logo","formData","email","password","rememberMe","captcha","StyledContainer","StyledWarning","concat","$right","undefined","$top","_ref","input","meta","_objectWithoutProperties","_excluded","hasError","touched","_Element","_objectSpread"],"sourceRoot":""}